{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SA0BA,SAASC,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACT,OAAIN,EACKI,EACLT,EAAAY,OAAOC,QAAQ,uBAAwCC,OAAfX,EAAS,QAAYW,OAANV,EAAM,QAGxDM,EACLV,EAAAY,OAAOG,QAAQ,sBAAqCD,OAAfX,EAAS,QAAYW,OAANV,EAAM,O,GAG7DA,E,KAtCM,CACXY,WAAYC,SAASC,cAAc,uBACnCC,UAAWF,SAASC,cAAc,sBAClCE,YAAaH,SAASC,cAAc,wBACpCG,KAAMJ,SAASC,cAAc,WAG1BG,KAAKC,iBAAiB,UAE3B,SAAsBC,GACpBA,EAAEC,iBAGqB,IAAjBH,EAAOE,EAAEE,cACTT,EAAaU,OAAOL,EAAKM,SAASvB,MAAMwB,OACxCT,EAAYO,OAAOL,EAAKM,SAASE,KAAKD,OACtCR,EAAcM,OAAOL,EAAKM,SAASG,OAAOF,OAEhD,GAAIZ,EAAa,GAAKG,EAAY,GAAKC,GAAe,EACpD,OAAOpB,EAAAY,OAAOmB,KAAK,+BAuBvB,SAAiCC,GAG/B,I,IAHiChB,EAAFgB,EAAEhB,WAAYG,EAAda,EAAcb,UAAWC,EAAzBY,EAAyBZ,YACpDhB,EAAQY,EAEHb,EAAW,EAAGA,GAAYiB,EAAajB,IAAY,CACpCD,EAAcC,EAAUC,GAChC6B,MAAK,SAAAC,G,OAAaA,C,IAAWC,OAAM,SAAAC,G,OAAWA,C,IAC5DhC,GAASe,C,EA3BYkB,CAAC,CAAErB,aAAYG,YAAWC,e","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst refs = {\n  firstDelay: document.querySelector('input[name=\"delay\"]'),\n  delayStep: document.querySelector('input[name=\"step\"]'),\n  delayAmount: document.querySelector('input[name=\"amount\"]'),\n  form: document.querySelector('.form'),\n};\n\nrefs.form.addEventListener('submit', onFormSubmit);\n\nfunction onFormSubmit(e) {\n  e.preventDefault();\n\n  // получаем введённые данные\n  const form = e.currentTarget;\n  const firstDelay = Number(form.elements.delay.value);\n  const delayStep = Number(form.elements.step.value);\n  const delayAmount = Number(form.elements.amount.value);\n  \n  if (firstDelay < 0 || delayStep < 0 || delayAmount <= 0) {\n    return Notify.info('Введите данные больше нуля');\n  }\n  createPromiseFromParams({ firstDelay, delayStep, delayAmount });\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {   \n        return resolve(\n          Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`)\n        );\n      } else {        \n        return reject(\n          Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`)\n        );\n      }\n    }, delay);\n  });\n}\n\nfunction createPromiseFromParams({ firstDelay, delayStep, delayAmount }) {\n  let delay = firstDelay;\n\n  for (let position = 1; position <= delayAmount; position++) {\n    const handlePromise = createPromise(position, delay);\n    handlePromise.then(onSuccess => onSuccess).catch(onError => onError);\n    delay += delayStep;\n  }\n}\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","Notify","success","concat","failure","firstDelay","document","querySelector","delayStep","delayAmount","form","addEventListener","e","preventDefault","currentTarget","Number","elements","value","step","amount","info","param","then","onSuccess","catch","onError","$ce04d3a99e08e73b$var$createPromiseFromParams"],"version":3,"file":"03-promises.7c75aca8.js.map"}
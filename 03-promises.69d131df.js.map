{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SA0BA,SAASC,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACT,OAAIN,EACKI,EAAQT,EAAAY,OAAOC,QAAQ,uBAAwCC,OAAfX,EAAS,QAAYW,OAANV,EAAM,QAGrEM,EAAOV,EAAAY,OAAOG,QAAQ,sBAAqCD,OAAfX,EAAS,QAAYW,OAANV,EAAM,O,GAEzEA,E,KAlCM,CACXY,WAAYC,SAASC,cAAc,uBACnCC,UAAWF,SAASC,cAAc,sBAClCE,YAAaH,SAASC,cAAc,wBACpCG,KAAMJ,SAASC,cAAc,WAG1BG,KAAKC,iBAAiB,UAE3B,SAAsBC,GACpBA,EAAEC,iBAGqB,IAAjBH,EAAOE,EAAEE,cACTT,EAAaK,EAAKK,SAAStB,MAAMuB,MACjCR,EAAYE,EAAKK,SAASE,KAAKD,MAC/BP,EAAcC,EAAKK,SAASG,OAAOF,MAEzC,GAAIX,EAAa,GAAKG,EAAY,GAAKC,GAAe,EACpD,OAAOpB,EAAAY,OAAOkB,KAAK,+BAmBvB,SAAiCC,GAG/B,I,IAHgCf,EAADe,EAACf,WAAYG,EAAbY,EAAaZ,UAAWC,EAAxBW,EAAwBX,YACnDhB,EAAQY,EAEHb,EAAW,EAAGA,GAAYiB,EAAajB,IAAY,CAEpCD,EAAcC,EAAUC,GAChC4B,MAAK,SAAAC,G,OAAWA,C,IAAWC,OAAM,SAAAC,G,OAASA,C,IACxD/B,GAASe,C,EAxBYiB,CAAC,CAACpB,aAAYG,YAAWC,e","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst refs = {\n  firstDelay: document.querySelector('input[name=\"delay\"]'),\n  delayStep: document.querySelector('input[name=\"step\"]'),\n  delayAmount: document.querySelector('input[name=\"amount\"]'),\n  form: document.querySelector('.form'),\n};\n\nrefs.form.addEventListener('submit', onFormSubmit);\n\nfunction onFormSubmit(e) {\n  e.preventDefault();\n\n  // получаем введённые данные\n  const form = e.currentTarget;\n  const firstDelay = form.elements.delay.value;\n  const delayStep = form.elements.step.value;\n  const delayAmount = form.elements.amount.value;\n\n  if (firstDelay < 0 || delayStep < 0 || delayAmount <= 0) {\n    return Notify.info('Введите данные больше нуля');\n  }\n  createPromiseFromParams({firstDelay, delayStep, delayAmount});   \n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        return resolve(Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`));\n        \n      } else {\n        return reject(Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`));\n      }\n    }, delay);\n  });\n}\n\nfunction createPromiseFromParams({firstDelay, delayStep, delayAmount}) {\n  let delay = firstDelay;\n  \n  for (let position = 1; position <= delayAmount; position++) {\n    \n    const handlePromise = createPromise(position, delay);\n    handlePromise.then(onSuccess=>onSuccess).catch(onError=>onError)\n    delay += delayStep;\n  } \n}"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","Notify","success","concat","failure","firstDelay","document","querySelector","delayStep","delayAmount","form","addEventListener","e","preventDefault","currentTarget","elements","value","step","amount","info","param","then","onSuccess","catch","onError","$ce04d3a99e08e73b$var$createPromiseFromParams"],"version":3,"file":"03-promises.69d131df.js.map"}